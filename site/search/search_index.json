{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"IntroductionA self-disciplined and focused software engineer with experience in developing innovative solutions, eager to contribute to solving real-world problems in a collaborative, respectful, and supportive environment.Connect with me:Languages and Tools:","text":"Hi \ud83d\udc4b, I'm Chike Egonu <ul> <li> <p>\ud83d\udd2d I\u2019m currently working on a Fraud Detection System and open to collaboration</p> </li> <li> <p>\ud83d\udc68\u200d\ud83d\udcbb All of my projects are available at https://mrchike.github.io/chikeegonu/</p> </li> <li> <p>\ud83d\udcdd I regularly write articles on https://dev.to/mrchike</p> </li> <li> <p>\ud83d\udcac Ask me about Python, FastAPI, Django, Javascript, React, Typescript</p> </li> </ul> <p> </p> <p></p> <p> </p> <p> </p> <p></p>"},{"location":"#github-stats","title":"GitHub Stats","text":"<p>\ud83c\udfc6 Public Repositories: 32 \ud83d\udc65 Followers: 38 \ud83d\udd17 Following: 25  </p> <p><p> </p></p>"},{"location":"#recent-activity","title":"Recent Activity","text":"<ul> <li>Created a new tag in media_app for seriesB_crud_ops.</li> <li>Deleted the tag seriesB_crud_operations in media_app.</li> <li>Pushed updates to the seriesB branch in media_app.</li> <li>Forked the n8n-workflows repository.</li> <li>Created a new tag in media_app for seriesB_celery_setup.</li> </ul>"},{"location":"articles/","title":"\ud83d\udcf0 Articles","text":""},{"location":"articles/#codebase-design","title":"Codebase Design","text":"<pre><code>media_app/\n\n\u251c\u2500\u2500 base/                                # Core feature module\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 router.py                        # Defines HTTP API endpoints and maps them to controller functions\n\u2502   \u251c\u2500\u2500 controller.py                    # Handles request-response cycle; delegates business logic to services\n\u2502   \u251c\u2500\u2500 service.py                       # Core business logic for async I/O operations\n\u2502   \u251c\u2500\u2500 model.py                         # SQLAlchemy ORM models representing database tables\n\u2502   \u251c\u2500\u2500 schema.py                        # Pydantic models for input validation and output serialization\n\u2502   \u251c\u2500\u2500 dependencies.py                  # Module-specific DI components like authentication and DB sessions\n\u2502   \u2514\u2500\u2500 tasks.py                         # Core business logic for CPU-bound operations\n\n\u251c\u2500\u2500 movies/                              # Movie feature module (same layout as base)\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 router.py\n\u2502   \u251c\u2500\u2500 controller.py\n\u2502   \u251c\u2500\u2500 service.py\n\u2502   \u251c\u2500\u2500 model.py\n\u2502   \u251c\u2500\u2500 schema.py\n\u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2514\u2500\u2500 tasks.py\n\n\u251c\u2500\u2500 static/                              # (Optional) Static files (e.g., images, CSS)\n\u251c\u2500\u2500 templates/                           # (Optional) Jinja2 or HTML templates for frontend rendering\n\u251c\u2500\u2500 docs/                                # (Optional) API documentation, design specs, or OpenAPI enhancements\n\n\u251c\u2500\u2500 shared/                              # Project-wide shared codebase\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 base_settings.py             # Base config for environments\n\u2502   \u2502   \u2514\u2500\u2500 settings.py                  # Pydantic-based config management\n\u2502   \u251c\u2500\u2500 db/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 connection.py                # DB engine/session handling\n\u2502   \u251c\u2500\u2500 dependencies/                    # Shared DI functions (e.g., auth, DB session)\n\u2502   \u2502   \u2514\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 middleware/                      # Global middlewares (e.g., logging, error handling)\n\u2502   \u2502   \u2514\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 external_apis/               # Third-party integrations\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 omdb_movies.py           # Integration with OMDB API\n\u2502   \u2502   \u2514\u2500\u2500 internal_operations/         # CPU-intensive logic, background tasks\n\u2502   \u2502       \u2514\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 utils/                           # Generic helpers\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 fetch_request_with_error_handling.py  # Error-resilient HTTP requests\n\n\u251c\u2500\u2500 scripts/                             # Developer or DevOps utilities\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 sanity_check.py                  # A friendly reminder not to lose your mind while debugging\n\ntests/                                   # Root of all tests\n\u251c\u2500\u2500 __init__.py\n\u2502\n\u251c\u2500\u2500 unit/                                # Fast, isolated logic-level tests\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 base/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 test_service.py\n\u2502   \u2514\u2500\u2500 movies/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 test_controller.py\n\u2502       \u251c\u2500\u2500 test_service.py\n\u2502       \u2514\u2500\u2500 test_tasks.py\n\u2502\n\u251c\u2500\u2500 integration/                         # DB/API/network dependent tests\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502\n\u251c\u2500\u2500 e2e/                                 # High-level, full user flow tests\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502\n\u251c\u2500\u2500 system/                              # System resilience, performance, fault-tolerance tests\n\u2502   \u251c\u2500\u2500 __init__.py\n\n\u251c\u2500\u2500 migrations/                          # Alembic migration files\n\u2502   \u251c\u2500\u2500 env.py\n\u2502   \u251c\u2500\u2500 README\n\u2502   \u251c\u2500\u2500 script.py.mako\n\u2502   \u2514\u2500\u2500 versions/                        # Versioned migration scripts\n\n\u251c\u2500\u2500 alembic.ini                          # Alembic configuration for database migrations\n\u251c\u2500\u2500 celeryconfig.py                      # Celery settings for async task queue\n\n\u251c\u2500\u2500 docker-compose.api.yaml              # Docker Compose API\n\u251c\u2500\u2500 docker-compose.db.yaml               # Docker Compose DB\n\u251c\u2500\u2500 Dockerfile                           # Base app Dockerfile\n\u251c\u2500\u2500 Dockerfile.nginx                     # Nginx reverse proxy Dockerfile\n\u251c\u2500\u2500 nginx.conf                           # Nginx configuration\n\u251c\u2500\u2500 entrypoint.sh                        # Shell script to run app container\n\u251c\u2500\u2500 series_a_setup.sh                    # SeriesA Environment setup script\n\u251c\u2500\u2500 series_b_setup.sh                    # SeriesB Environment setup script\n\n\u251c\u2500\u2500 .example.env                         # Template for environment variables\n\u251c\u2500\u2500 .coveragerc                          # Code coverage settings\n\u251c\u2500\u2500 .gitignore                           # Files and folders ignored by Git\n\n\u251c\u2500\u2500 main.py                              # FastAPI application entrypoint\n\u251c\u2500\u2500 pytest.ini                           # Pytest configuration\n\u251c\u2500\u2500 requirements.txt                     # Python dependency list\n\u251c\u2500\u2500 JOURNAL.md                           # Development log: issues faced, solutions, and resources\n\u2514\u2500\u2500 README.md                            # Project overview, setup, and usage\n\n</code></pre>"},{"location":"certifications/","title":"\ud83d\udcdc Certifications","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"certifications/#unreleased","title":"[Unreleased]","text":""},{"location":"certifications/#added","title":"\u2728 Added","text":"<ul> <li>MKDocs project documentation</li> </ul>"},{"location":"certifications/#changed","title":"\ud83d\udd04 Changed","text":"<ul> <li>Updated series B script</li> </ul>"},{"location":"certifications/#100-1900-01-01","title":"[1.0.0] - 1900-01-01","text":""},{"location":"certifications/#added_1","title":"\u2728 Added","text":"<ul> <li>Placeholder information</li> </ul>"},{"location":"certifications/#changed_1","title":"\ud83d\udd04 Changed","text":"<ul> <li>Placeholder information</li> </ul>"},{"location":"certifications/#fixed","title":"\ud83d\udc1b Fixed","text":"<ul> <li>Placeholder information</li> </ul>"},{"location":"certifications/#removed","title":"\ud83d\uddd1\ufe0f Removed","text":"<ul> <li>Placeholder information</li> </ul>"},{"location":"certifications/#deprecated","title":"\u26a0\ufe0f Deprecated","text":"<ul> <li>Placeholder information</li> </ul>"},{"location":"certifications/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Placeholder information</li> </ul>"},{"location":"contact/","title":"\u2709\ufe0f Contact","text":""},{"location":"contact/#reach-out-for-support","title":"Reach out for support","text":"<ul> <li>Chike Egonu</li> </ul>"},{"location":"contributions/","title":"\ud83e\udd1d Contributions","text":""},{"location":"contributions/#contributors-list","title":"Contributors list","text":""},{"location":"projects/","title":"\ud83d\udcbc Projects","text":""},{"location":"projects/#project-features","title":"Project Features","text":"<ul> <li>\ud83c\udfac Modular architecture with separate domains for Movies</li> <li>\ud83e\udde9 Well-defined API layer with routers, controllers, and dependency injection</li> <li>\u2699\ufe0f Centralized configuration management under shared/config with Pydantic settings</li> <li>\ud83d\udd17 Integration with external APIs (OMDb) in shared/services/external_apis</li> <li>\ud83d\udcdc Comprehensive project documentation and logs maintained in docs and JOURNAL.md</li> <li>\ud83d\udcc1 Static assets management for project documentation</li> <li>\ud83e\uddea Unit tests covering controllers, tasks and services for movie module</li> <li>\ud83d\udc1e Graceful exception handling with low-level error logging for internal teams and user-friendly messages for a smooth experience.</li> <li>\ud83d\udd27 Utility and helper functions centralized in shared/utils for reuse across modules</li> <li>\ud83d\udc33 Dockerized environment including app, Nginx reverse proxy, and Redis for Celery broker/backend</li> <li>\ud83d\udce6 Database Setup and Integration for Redis, Postgres &amp; MongoDB</li> <li>\ud83d\udce6 Database management with Alembic migrations and SQLAlchemy models per module</li> <li>\u26a1 Caching layer with Redis or Memcached for improved performance</li> <li>\ud83d\ude80 Asynchronous task processing using Celery for CPU-intensive tasks offloaded to workers</li> </ul>"},{"location":"projects/#upcoming-features-series-x","title":"Upcoming Features (Series-X)","text":"<ul> <li>\ud83e\uddea Integration, System and E2E tests covering controllers, tasks and services for all modules</li> <li>\ud83d\udd12 Middleware for cross-cutting concerns and security</li> <li>\ud83c\udfaf JWT-based user authentication and profile management</li> <li>\ud83d\udd14 Notifications system for updates, new releases, and user interactions</li> <li>\ud83c\udf10 Localization and internationalization for multi-language and regional support</li> <li>\ud83d\udee1\ufe0f IP-based rate limiting (e.g., via Redis or FastAPI-limiter)</li> <li>\ud83d\ude80 CI/CD pipeline setup for automated testing, build, and deployment</li> <li>\ud83d\udd10 OAuth2 support (e.g., Google or GitHub login)</li> <li>\ud83d\udcc4 Audit logs for user actions and system changes</li> <li>\ud83d\udc65 User registration and management system</li> <li>\ud83d\udd11 Password reset flow</li> <li>\ud83d\udc6e\u200d\u2642\ufe0f Role-based access control (RBAC) or attribute-based access control (ABAC)</li> <li>\ud83d\udcec Email verification and support</li> <li>\ud83d\udcca Event tracking for analytics (e.g., user interactions, API usage)</li> <li>\ud83d\udd0d Search capabilities (e.g., Elasticsearch integration for advanced movie/actor queries)</li> <li>\ud83d\udcbe Data export/import utilities (CSV, JSON)</li> <li>\ud83d\udd10 Brute force protection on login routes</li> <li>\ud83c\udf0d Multitenancy / SaaS Setup</li> <li>\ud83d\udcf9 Integration with multiple cloud storage (e.g., S3) for media uploads</li> </ul>"}]}